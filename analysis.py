import numpy as np
from pybit.unified_trading import HTTP
from cfg import symb, bykey, bysecret, tgID, tgtoken
from logs.logging_config import logging
from telebot import TeleBot
from features.market import get_last_5_weeks_and_low_price, get_price_or_change, get_buy_sell_ratio
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit)
session = HTTP(testnet=False, api_key=bykey, api_secret=bysecret)
bot = TeleBot(tgtoken)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_notification_time = {}

def calculate_rsi(timeframe):
    try:
        logging.info(f"–†–∞—Å—á–µ—Ç RSI –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {timeframe}")
        close = session.get_kline(category="spot", symbol=symb, interval=timeframe, limit=100).get('result', {}).get('list', [])
        if not close:
            logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        close_prices = np.array([i[4] for i in reversed(close)], dtype='float')
        deltas = np.diff(close_prices)
        seed = deltas[:15]
        up = seed[seed >= 0].sum() / 14
        down = -seed[seed < 0].sum() / 14
        rs = up / down
        rsi = np.zeros_like(close_prices)
        rsi[:14] = 100. - 100. / (1. + rs)
        
        for i in range(14, len(close_prices)):
            delta = deltas[i-1]
            upval = delta if delta > 0 else 0
            downval = -delta if delta < 0 else 0
            up = (up * 13 + upval) / 14
            down = (down * 13 + downval) / 14
            rs = up / down
            rsi[i] = 100. - 100. / (1. + rs)
        
        rsi_value = round(rsi[-1], 2)
        logging.info(f"RSI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {rsi_value}")
        return rsi_value
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ RSI: {e}")
        return "–û—à–∏–±–∫–∞"

def check_rsi_and_notify():
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ RSI –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    rsi = calculate_rsi("1")
    if isinstance(rsi, str):
        return  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ RSI, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    current_time = datetime.now()
    for user_id in tgID:
        try:
            if user_id in last_notification_time:
                elapsed_time = current_time - last_notification_time[user_id]
                if elapsed_time < timedelta(minutes=15):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 15 –º–∏–Ω—É—Ç

            if rsi < 30:
                send_rsi_notification(user_id, rsi, "RSI –º–µ–Ω—å—à–µ 30")
            elif rsi < 35:
                send_rsi_notification(user_id, rsi, "RSI –º–µ–Ω—å—à–µ 35")
            elif rsi > 70:
                send_rsi_notification(user_id, rsi, "RSI –±–æ–ª—å—à–µ 70")

            last_notification_time[user_id] = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {e}")

def send_rsi_notification(user_id, rsi, title):
    try:
        screenshot, lowprice14d = get_last_5_weeks_and_low_price()
        current_price = get_price_or_change('price')
        
        if lowprice14d is None or current_price is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        
        change_percent = round((float(current_price) - lowprice14d) / lowprice14d * 100, 2)
        buy_sell_ratio = get_buy_sell_ratio("1")
        
        caption = (
            f"{title}\n"
            f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π: {change_percent}%\n"
            f"üìä RSI: {rsi}\n"
            f"üìà {buy_sell_ratio}\n"
            f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {current_price} USDT"
        )
        
        bot.send_photo(chat_id=user_id, photo=screenshot, caption=caption)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {e}")
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
