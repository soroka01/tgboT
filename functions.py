import time
import pytz
import sqlite3
import schedule
from telebot import types
from datetime import datetime
from cfg import timeframe, tgID, rsi_threshold_35, rsi_threshold_30, rsi_threshold_70, rsi_threshold_60
from logs.logging_config import logging
from features.market import get_price_or_change, get_buy_sell_ratio, get_last_5_weeks_and_low_price
from features.market import calculate_rsi
from database import load_user_data, save_user_data, load_user_alerts, save_user_alerts, load_user_rsi_alerts, save_user_rsi_alerts
from buttons import create_back_button
from bot_instance import session, bot
from buttons import create_notifications_menu

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    try:
        conn = sqlite3.connect('/root/TgBots/Bots/rsitgbotT/users.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                data TEXT
            )
        ''')
        conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_report(user_id, rsi, screenshot, lowprice14d, current_price, buy_sell_ratio):
    try:
        change_percent = round((float(current_price) - lowprice14d) / lowprice14d * 100, 2)
        caption = f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π: {change_percent}%\nüìä RSI: {rsi}\nüìà {buy_sell_ratio}"
        bot.send_photo(chat_id=user_id, photo=screenshot, caption=caption)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ RSI –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def get_rsi_and_send_message(user_id):
    try:
        rsi = calculate_rsi(timeframe)
        screenshot, lowprice14d = get_last_5_weeks_and_low_price()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        current_price = get_price_or_change('price')
        
        if not lowprice14d or not current_price:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        
        buy_sell_ratio = get_buy_sell_ratio(timeframe)
        send_report(user_id, rsi, screenshot, lowprice14d, current_price, buy_sell_ratio)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSI: {e}")
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSI: {e}")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏
def daily_update():
    logging.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    moscow_time = get_moscow_time()
    if moscow_time.hour == 8 and moscow_time.minute == 30:
        for user_id in tgID:
            get_rsi_and_send_message(user_id)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RSI
def monitor_rsi(user_id):
    logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RSI –¥–ª—è user_id: {user_id}")
    global rsi_threshold_35, rsi_threshold_30, rsi_threshold_70, rsi_threshold_60
    while True:
        try:
            rsihour = float(calculate_rsi(timeframe))
            thresholds = {30: rsi_threshold_30, 35: rsi_threshold_35, 60: rsi_threshold_60, 70: rsi_threshold_70}
            for threshold in thresholds:
                if (rsihour < threshold and thresholds[threshold]) or (rsihour > threshold and not thresholds[threshold]):
                    get_rsi_and_send_message(user_id)
                    globals()[f"rsi_threshold_{threshold}"] = not thresholds[threshold]
                    logging.info(f"RSI: {rsihour} | –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤: {thresholds}")
            time.sleep(float(timeframe) / 2 * 10)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ RSI –¥–ª—è user_id {user_id}: {e}")
            time.sleep(10)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
def process_trade(message):
    user_id = message.chat.id
    amount_usdt = message.text.strip()
    
    if not amount_usdt.isdigit():
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    try:
        order = session.place_active_order(
            category="spot",
            symbol="BTCUSDT",
            side="Buy",
            orderType="Market",
            qty=amount_usdt,
            marketUnit="quoteCoin"
        )
        bot.send_message(user_id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ BTC –Ω–∞ {amount_usdt} USDT. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['result']['qty']}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

def get_latest_crypto_news():
    return "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö: ..."

def get_trade_history():
    logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    try:
        orders = session.get_order_history(category="spot", symbol="BTCUSDT", limit=10)
        if not orders.get('result'):
            return "–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        history = "\n".join([f"ID: {order['orderId']}, –°—É–º–º–∞: {order['qty']}, –¶–µ–Ω–∞: {order['price']}, –°—Ç–∞—Ç—É—Å: {order['status']}" for order in orders['result']])
        return history
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

def get_balance():
    logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    try:
        response = session.get_wallet_balance(accountType="UNIFIED")
        if response.get('ret_code') != 0:
            raise ValueError(f"–û—à–∏–±–∫–∞ API: {response.get('ret_msg')}")
        
        balances = response.get('result', {}).get('list', [])[0].get('coin', [])
        btc_balance = next((item for item in balances if item["coin"] == "BTC"), {}).get("walletBalance", "N/A")
        usdt_balance = next((item for item in balances if item["coin"] == "USDT"), {}).get("walletBalance", "N/A")
        
        return btc_balance, usdt_balance
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

def delete_all_price_alerts(message):
    user_id = message.chat.id
    save_user_alerts(user_id, [])
    bot.send_message(user_id, "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=create_back_button("notifications"))

def delete_price_alert(message):
    user_id = message.chat.id
    alerts = load_user_alerts(user_id)
    if alerts:
        alerts_text = "\n".join([f"{i+1}. {level['price']} USDT - {'–ù–∞–≤—Å–µ–≥–¥–∞' if level['permanent'] else '–ï–¥–∏–Ω–∏—á–Ω–æ'}" for i, level in enumerate(alerts)])
        bot.send_message(user_id, f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–∏:\n{alerts_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=create_back_button("notifications"))
        bot.register_next_step_handler(message, remove_price_alert)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–∏.", reply_markup=create_back_button("notifications"))

def remove_price_alert(message):
    user_id = message.chat.id
    try:
        alert_index = int(message.text.strip()) - 1
        alerts = load_user_alerts(user_id)
        if 0 <= alert_index < len(alerts):
            removed_alert = alerts.pop(alert_index)
            save_user_alerts(user_id, alerts)
            bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {removed_alert['price']} USDT —É–¥–∞–ª–µ–Ω–∞.", reply_markup=create_back_button("notifications"))
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=create_back_button("notifications"))
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=create_back_button("notifications"))

def list_price_alerts(message):
    user_id = message.chat.id
    alerts = load_user_alerts(user_id)
    if alerts:
        alerts_text = "\n".join([f"{i+1}. {level['price']} USDT - {'–ù–∞–≤—Å–µ–≥–¥–∞' if level['permanent'] else '–ï–¥–∏–Ω–∏—á–Ω–æ'}" for i, level in enumerate(alerts)])
        bot.send_message(user_id, f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–∏:\n{alerts_text}", reply_markup=create_back_button("notifications"))
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–∏.", reply_markup=create_back_button("notifications"))

def save_price_alert(message):
    user_id = message.chat.id
    try:
        price_level = float(message.text.strip())
        alerts = load_user_alerts(user_id)
        if len(alerts) >= 15:
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ 15 –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–∏.", reply_markup=create_back_button("notifications"))
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ï–¥–∏–Ω–∏—á–Ω–æ", callback_data=f"alert_once_{price_level}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"alert_permanent_{price_level}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="alert_back"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=create_back_button("notifications"))

def save_rsi_alert(message):
    user_id = message.chat.id
    try:
        rsi_level = float(message.text.strip())
        alerts = load_user_rsi_alerts(user_id)
        if len(alerts) >= 15:
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ 15 –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–∏.", reply_markup=create_back_button("notifications"))
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(f"RSI < {rsi_level}", callback_data=f"rsi_alert_below_{rsi_level}"))
        markup.add(types.InlineKeyboardButton(f"RSI > {rsi_level}", callback_data=f"rsi_alert_above_{rsi_level}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="alert_back"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=create_back_button("notifications"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("rsi_alert_below_"))
def rsi_alert_below_callback(call):
    user_id = call.message.chat.id
    try:
        rsi_level = float(call.data.split("_")[3])
        alerts = load_user_rsi_alerts(user_id)
        alerts.append({"level": rsi_level, "condition": "below", "permanent": False})
        save_user_rsi_alerts(user_id, alerts)
        bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å RSI < {rsi_level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=create_back_button("notifications"))
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è RSI: {e}")
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è RSI.", reply_markup=create_back_button("notifications"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("rsi_alert_above_"))
def rsi_alert_above_callback(call):
    user_id = call.message.chat.id
    try:
        rsi_level = float(call.data.split("_")[3])
        alerts = load_user_rsi_alerts(user_id)
        alerts.append({"level": rsi_level, "condition": "above", "permanent": False})
        save_user_rsi_alerts(user_id, alerts)
        bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å RSI > {rsi_level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=create_back_button("notifications"))
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è RSI: {e}")
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è RSI.", reply_markup=create_back_button("notifications"))

def send_message_with_logging(user_id, text, reply_markup=None):
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id: {user_id}")
    bot.send_message(user_id, text, reply_markup=reply_markup)

def edit_message_with_logging(call, text, reply_markup=None):
    user_id = call.message.chat.id
    logging.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id: {user_id}")
    bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text=text, reply_markup=reply_markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("alert_once_"))
def alert_once_callback(call):
    user_id = call.message.chat.id
    try:
        price_level = float(call.data.split("_")[2])
        alerts = load_user_alerts(user_id)
        alerts.append({"price": price_level, "permanent": False})
        save_user_alerts(user_id, alerts)
        edit_message_with_logging(call, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–µ–Ω—É {price_level} USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", create_back_button("notifications"))
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã: {e}")
        edit_message_with_logging(call, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã.", create_back_button("notifications"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("alert_permanent_"))
def alert_permanent_callback(call):
    user_id = call.message.chat.id
    try:
        price_level = float(call.data.split("_")[2])
        alerts = load_user_alerts(user_id)
        alerts.append({"price": price_level, "permanent": True})
        save_user_alerts(user_id, alerts)
        edit_message_with_logging(call, f"–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–µ–Ω—É {price_level} USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", create_back_button("notifications"))
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—ã: {e}")
        edit_message_with_logging(call, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã.", create_back_button("notifications"))

@bot.callback_query_handler(func=lambda call: call.data == "alert_back")
def alert_back_callback(call):
    user_id = call.message.chat.id
    logging.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è user_id: {user_id}")
    edit_message_with_logging(call, "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", create_notifications_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith("rsi_alert_once_"))
def rsi_alert_once_callback(call):
    user_id = call.message.chat.id
    try:
        rsi_level = float(call.data.split("_")[3])
        alerts = load_user_rsi_alerts(user_id)
        alerts.append({"level": rsi_level, "permanent": False})
        save_user_rsi_alerts(user_id, alerts)
        bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ RSI {rsi_level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=create_back_button("notifications"))
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è RSI: {e}")
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RSI.", reply_markup=create_back_button("notifications"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("rsi_alert_permanent_"))
def rsi_alert_permanent_callback(call):
    user_id = call.message.chat.id
    try:
        rsi_level = float(call.data.split("_")[3])
        alerts = load_user_rsi_alerts(user_id)
        alerts.append({"level": rsi_level, "permanent": True})
        save_user_rsi_alerts(user_id, alerts)
        bot.send_message(user_id, f"–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å RSI {rsi_level} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=create_back_button("notifications"))
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è RSI: {e}")
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–≤–Ω—è RSI.", reply_markup=create_back_button("notifications"))

def delete_rsi_alert(message):
    user_id = message.chat.id
    alerts = load_user_rsi_alerts(user_id)
    if alerts:
        alerts_text = "\n".join([f"{i+1}. {level['level']} - {'<' if level['condition'] == 'below' else '>'} - {'–ù–∞–≤—Å–µ–≥–¥–∞' if level['permanent'] else '–ï–¥–∏–Ω–∏—á–Ω–æ'}" for i, level in enumerate(alerts)])
        bot.edit_message_text(chat_id=user_id, message_id=message.message_id, text=f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ RSI:\n{alerts_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=create_back_button("notifications"))
        bot.register_next_step_handler(message, remove_rsi_alert)
    else:
        bot.edit_message_text(chat_id=user_id, message_id=message.message_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ RSI.", reply_markup=create_back_button("notifications"))

def delete_all_rsi_alerts(message):
    user_id = message.chat.id
    save_user_rsi_alerts(user_id, [])
    bot.send_message(user_id, "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ RSI —É–¥–∞–ª–µ–Ω—ã.", reply_markup=create_back_button("notifications"))

def remove_rsi_alert(message):
    user_id = message.chat.id
    try:
        alert_index = int(message.text.strip()) - 1
        alerts = load_user_rsi_alerts(user_id)
        if 0 <= alert_index < len(alerts):
            removed_alert = alerts.pop(alert_index)
            save_user_rsi_alerts(user_id, alerts)
            bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å RSI {removed_alert['level']} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=create_back_button("notifications"))
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=create_back_button("notifications"))
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=create_back_button("notifications"))

def list_rsi_alerts(message):
    user_id = message.chat.id
    alerts = load_user_rsi_alerts(user_id)
    if alerts:
        alerts_text = "\n".join([f"{i+1}. {level['level']} - {'<' if level['condition'] == 'below' else '>'} - {'–ù–∞–≤—Å–µ–≥–¥–∞' if level['permanent'] else '–ï–¥–∏–Ω–∏—á–Ω–æ'}" for i, level in enumerate(alerts)])
        bot.send_message(user_id, f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ RSI:\n{alerts_text}", reply_markup=create_back_button("notifications"))
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ RSI.", reply_markup=create_back_button("notifications"))

def delete_all_alerts(message):
    user_id = message.chat.id
    save_user_alerts(user_id, [])
    save_user_rsi_alerts(user_id, [])
    bot.send_message(user_id, "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–∏ –∏ RSI —É–¥–∞–ª–µ–Ω—ã.", reply_markup=create_back_button("notifications"))

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

def get_moscow_time():
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)
    return moscow_time

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

def notifications_menu(message):
    user_id = message.chat.id
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è user_id: {user_id}")
    markup = create_notifications_menu()
    bot.send_message(user_id, "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=markup)

def check_price_alerts():
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ")
    current_price = get_price_or_change('price')
    for user_id in tgID:
        alerts = load_user_alerts(user_id)
        for level in alerts[:]:
            if current_price >= level['price']:
                bot.send_message(user_id, f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {level['price']} USDT. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USDT.")
                if not level['permanent']:
                    alerts.remove(level)
        save_user_alerts(user_id, alerts)

@bot.callback_query_handler(func=lambda call: call.data == "delete_price_alert")
def delete_price_alert_callback(call):
    delete_price_alert(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "delete_rsi_alert")
def delete_rsi_alert_callback(call):
    delete_rsi_alert(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "delete_all_price_alerts")
def delete_all_price_alerts_callback(call):
    delete_all_price_alerts(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "delete_all_rsi_alerts")
def delete_all_rsi_alerts_callback(call):
    delete_all_rsi_alerts(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "delete_all_alerts")
def delete_all_alerts_callback(call):
    delete_all_alerts(call.message)
