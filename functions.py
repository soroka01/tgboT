import io
import os
import json
import time
import pytz
import schedule
import requests
import numpy as np
import matplotlib.pyplot as plt
from telebot import TeleBot
from pybit.unified_trading import HTTP
from datetime import datetime
from cfg import symb, timeframe, tgtoken, tgID, bykey, bysecret

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit –∏ Telegram –±–æ—Ç–∞)
session = HTTP(testnet=False, api_key=bykey, api_secret=bysecret)
bot = TeleBot(tgtoken)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def load_user_data(user_id):
    filepath = f"/root/TgBots/Bots/users/{user_id}.json"
    if os.path.exists(filepath):
        with open(filepath, "r") as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                return {}
    return {}

def save_user_data(user_id, data):
    directory = "/root/TgBots/Bots/users"
    if not os.path.exists(directory):
        os.makedirs(directory)
    filepath = f"{directory}/{user_id}.json"
    with open(filepath, "w") as file:
        json.dump(data, file)

def load_user_alerts(user_id):
    user_data = load_user_data(user_id)
    return user_data.get("alerts", [])

def save_user_alerts(user_id, alerts):
    user_data = load_user_data(user_id)
    user_data["alerts"] = alerts
    save_user_data(user_id, user_data)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä—ã–Ω–∫–∞

# –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_price_data(interval="D"):
    kline = session.get_kline(category="spot", symbol=symb, interval=interval, limit=1).get('result', {}).get('list', [])
    if not kline:
        return None, None
    open_price, close_price = kline[0][1], kline[0][4]
    return float(open_price), float(close_price)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–ª–∏ –¥–Ω–µ–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ %
def get_price_or_change(PriceOrDailyChange):
    open_price, close_price = get_price_data()
    if close_price is None:
        return "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    if PriceOrDailyChange == 'price':
        return close_price
    if PriceOrDailyChange == 'change':
        return f"{round(((close_price - open_price) / close_price) * 100, 2)}%"

# –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Ä—ã–Ω–∫–µ BTC/USDT
def get_buy_sell_ratio(timeframe):
    periods = {60: "1h", "D": "1d"}
    url = f"https://api.bybit.com/v5/market/account-ratio?category=linear&symbol=BTCUSDT&period={periods.get(timeframe, '1h')}&limit=1"
    
    try:
        response = requests.get(url).json()
        data = response.get('result', {}).get('list', [{}])[0]
        buy, sell = data.get('buyRatio', "N/A"), data.get('sellRatio', "N/A")
        return f"üü¢ {buy}  {sell} üî¥"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

# –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –Ω–µ–¥–µ–ª—å –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ 14 –¥–Ω–µ–π
def get_last_5_weeks_and_low_price():
    lim = 7 * 5  # 5 –Ω–µ–¥–µ–ª—å
    klines = session.get_kline(category="spot", symbol=symb, interval='D', limit=lim).get('result', {}).get('list', [])
    
    plt.figure()
    width = 0.4
    width2 = 0.05
    col1 = 'green'
    col2 = 'red'
    
    x = 0
    prices = []
    for i in klines:
        x += 1
        prices.append(i)  
        if x == 14:
            break
    prices = sorted(prices, reverse=False)
    klines = sorted(klines, reverse=False)
    
    for i in klines:
        if i[4] > i[1]:
            plt.bar(i[0], float(i[4]) - float(i[1]), width, bottom=float(i[1]), color=col1)
            plt.bar(i[0], float(i[2]) - float(i[4]), width2, bottom=float(i[4]), color=col1)
            plt.bar(i[0], float(i[3]) - float(i[1]), width2, bottom=float(i[1]), color=col1)
        elif i[4] < i[1]:
            plt.bar(i[0], float(i[4]) - float(i[1]), width, bottom=float(i[1]), color=col2)
            plt.bar(i[0], float(i[2]) - float(i[1]), width2, bottom=float(i[1]), color=col2)
            plt.bar(i[0], float(i[3]) - float(i[4]), width2, bottom=float(i[4]), color=col2)
    
    lowprices14d = [float(i[3]) for i in prices]
    lowprice14d = min(lowprices14d)
    
    plt.axhline(y=lowprice14d, color='purple', linestyle='solid')
    plt.xticks([])
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    
    return buf, lowprice14d

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI (–∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
def calculate_rsi(timeframe):
    close_prices = session.get_kline(category="spot", symbol=symb, interval=timeframe, limit=100).get('result', {}).get('list', [])
    if not close_prices:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    close_prices = np.array([float(i[4]) for i in reversed(close_prices)], dtype='float')
    deltas = np.diff(close_prices)
    n = 14
    seed = deltas[:n+1]
    up = seed[seed >= 0].sum() / n
    down = -seed[seed < 0].sum() / n
    rs = up / down
    rsi = np.zeros_like(close_prices)
    rsi[:n] = 100. - 100. / (1. + rs)
    
    for i in range(n, len(close_prices)):
        delta = deltas[i-1]
        upval = delta if delta > 0 else 0
        downval = -delta if delta < 0 else 0
        up = (up * (n - 1) + upval) / n
        down = (down * (n - 1) + downval) / n
        rs = up / down
        rsi[i] = 100. - 100. / (1. + rs)
        
    return round(rsi[-1], 2)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
def send_report(user_id):
    try:
        rsi = calculate_rsi(timeframe)
        screenshot, lowprice14d = get_last_5_weeks_and_low_price()
        current_price = get_price_or_change('price')
        
        if not lowprice14d or not current_price:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        
        change_percent = round((float(current_price) - lowprice14d) / lowprice14d * 100, 2)
        buy_sell_ratio = get_buy_sell_ratio(timeframe)
        
        caption = f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π: {change_percent}%\nüìä RSI: {rsi}\nüìà {buy_sell_ratio}"
        bot.send_photo(chat_id=user_id, photo=screenshot, caption=caption)
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ RSI –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def get_rsi_and_send_message(user_id):
    try:
        rsi = calculate_rsi(timeframe)
        send_report(user_id)
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSI: {e}")

# –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ 08:30 –ø–æ –ú–°–ö
def daily_update():
    moscow_time = get_moscow_time(pytz)
    if moscow_time.hour == 8 and moscow_time.minute == 30:
        for user_id in tgID:
            try:
                rsi = calculate_rsi(timeframe)
                screenshot, lowprice14d = get_last_5_weeks_and_low_price()
                current_price = get_price_or_change('price')
                if lowprice14d is None or current_price is None:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                
                change_percent = round((float(current_price) - lowprice14d) / lowprice14d * 100, 2)
                buy_sell_ratio = get_buy_sell_ratio(timeframe)
                
                caption = (
                    f"–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢\n"
                    f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π: {change_percent}%\n"
                    f"üìä RSI: {rsi}\n"
                    f"üìà {buy_sell_ratio}\n"
                    f"üí≤ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC:* *{current_price}* USDT"
                )
                
                bot.send_message(chat_id=user_id, text=caption, parse_mode='Markdown')
                bot.send_photo(chat_id=user_id, photo=screenshot, caption=caption)
            except Exception as e:
                bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

schedule.every().day.at("08:30").do(daily_update)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç RSI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
def monitor_rsi(user_id):
    global rsiduplication35, rsiduplication30, rsiduplication70, rsiduplication60
    while True:
        try:
            rsihour = float(calculate_rsi(timeframe))
            thresholds = {30: rsiduplication30, 35: rsiduplication35, 60: rsiduplication60, 70: rsiduplication70}
            for threshold in thresholds:
                if (rsihour < threshold and thresholds[threshold]) or (rsihour > threshold and not thresholds[threshold]):
                    get_rsi_and_send_message(user_id)
                    globals()[f"rsiduplication{threshold}"] = not thresholds[threshold]
                    print(f"RSI: {rsihour} | –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤: {thresholds}")
            time.sleep(float(timeframe) / 2 * 10)
        except Exception as e:
            time.sleep(10)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É BTC –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_trade(message):
    user_id = message.chat.id
    amount_usdt = message.text.strip()
    
    if not amount_usdt.isdigit():
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    try:
        order = session.place_active_order(
            category="spot",
            symbol="BTCUSDT",
            side="Buy",
            orderType="Market",
            qty=amount_usdt,
            marketUnit="quoteCoin"
        )
        bot.send_message(user_id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ BTC –Ω–∞ {amount_usdt} USDT. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['result']['qty']}")
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def get_latest_crypto_news():
    # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –∫ API –Ω–æ–≤–æ—Å—Ç–µ–π)
    return "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö: ..."

def get_converted_amount(amount, from_currency, to_currency):
    # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    return amount * 0.000022  # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USD –≤ BTC

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–°–ö
def get_moscow_time(pytz):
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)
    return moscow_time

# –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)
