import telebot
from features.trade import process_trade, get_trade_history, get_balance as fetch_balance
from features.market import get_price_or_change, get_buy_sell_ratio, get_last_5_weeks_and_low_price
from buttons import create_back_button, create_main_menu, create_babit_menu, create_account_menu, create_notifications_menu
from features.converter import converter_menu
from analysis import calculate_rsi
from database import load_user_data, save_user_alerts, load_user_alerts
from features.news import get_latest_crypto_news
from cfg import timeframe
from logs.logging_config import logging
from functions import save_price_alert, save_rsi_alert, list_price_alerts, list_rsi_alerts, delete_price_alert, delete_all_price_alerts

# –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–º–æ—â–∏
WELCOME_MESSAGE = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–æ–º–æ—â—å —Ç—É—Ç: /help\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
HELP_MESSAGE = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\nüìä –°—Ç–∞—Ç–∞ - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\nüí∏ –ë–∞–±–∏—Ç - –ú–µ–Ω—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\nüë§ –ê–∫–∫–∞—É–Ω—Ç - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\nüì∞ –ù–æ–≤–æ—Å—Ç–∏ - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö\nüí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç"

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞
def register_handlers(bot, session):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    def send_message_with_logging(user_id, text, reply_markup=None):
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id: {user_id}")
        bot.send_message(user_id, text, reply_markup=reply_markup)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    def edit_message_with_logging(call, reply_markup=None):
        user_id = call.message.chat.id
        logging.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id: {user_id}")
        try:
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=reply_markup)
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id: {user_id} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Ä–∞–∑–º–µ—Ç–∫–∞ —Ç–µ –∂–µ —Å–∞–º—ã–µ.")
            else:
                raise e

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        user_id = message.chat.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã {message.text} –¥–ª—è user_id: {user_id}")
        if message.text == "/start":
            send_message_with_logging(user_id, WELCOME_MESSAGE, create_main_menu())
        elif message.text == "/help":
            send_message_with_logging(user_id, HELP_MESSAGE, create_back_button("menu"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–∞–Ω–Ω—ã—Ö
    @bot.callback_query_handler(func=lambda call: call.data in ["stat", "babit", "notifications", "account", "news", "converter"])
    def handle_callbacks(call):
        user_id = call.message.chat.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback data {call.data} –¥–ª—è user_id: {user_id}")
        edit_message_with_logging(call)
        if call.data == "stat":
            send_stat(call.message)
        elif call.data == "babit":
            babit_menu(call.message)
        elif call.data == "notifications":
            notifications_menu(call.message)
        elif call.data == "account":
            account_info(call.message)
        elif call.data == "news":
            send_news(call.message)
        elif call.data == "converter":
            converter_menu(call.message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    @bot.callback_query_handler(func=lambda call: call.data in ["set_price_alert", "list_price_alerts", "set_rsi_alert", "list_rsi_alerts", "delete_alert", "delete_all_alerts"])
    def handle_notification_callbacks(call):
        user_id = call.message.chat.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback data {call.data} –¥–ª—è user_id: {user_id}")
        edit_message_with_logging(call)
        if call.data == "set_price_alert":
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(call.message, save_price_alert)
        elif call.data == "list_price_alerts":
            list_price_alerts(call.message)
        elif call.data == "set_rsi_alert":
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å RSI –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(call.message, save_rsi_alert)
        elif call.data == "list_rsi_alerts":
            list_rsi_alerts(call.message)
        elif call.data == "delete_alert":
            delete_price_alert(call.message)
        elif call.data == "delete_all_alerts":
            delete_all_price_alerts(call.message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    @bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_"))
    def back_to_menu_callback(call):
        user_id = call.message.chat.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback data {call.data} –¥–ª—è user_id: {user_id}")
        bot.clear_step_handler_by_chat_id(chat_id=user_id)  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        edit_message_with_logging(call)
        menu = call.data.split("_")[2]
        if menu == "menu":
            send_message_with_logging(user_id, WELCOME_MESSAGE, create_main_menu())
        elif menu == "babit":
            babit_menu(call.message)
        elif menu == "notifications":
            notifications_menu(call.message)
        elif menu == "account":
            account_info(call.message)
        elif menu == "converter":
            converter_menu(call.message)
        elif menu == "news":
            send_news(call.message)

    @bot.callback_query_handler(func=lambda call: call.data in ["balance", "history", "trade", "current_price"])
    def handle_babit_callbacks(call):
        user_id = call.message.chat.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback data {call.data} –¥–ª—è user_id: {user_id}")
        edit_message_with_logging(call)
        if call.data == "balance":
            get_balance(call.message)
        elif call.data == "history":
            send_history(call.message)
        elif call.data == "trade":
            trade_btc(call.message)
        elif call.data == "current_price":
            send_current_price(call.message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @bot.message_handler(func=lambda message: message.text in ["üìä –°—Ç–∞—Ç–∞", "üí∏ –ë–∞–±–∏—Ç", "üí∞ –ë–∞–ª–∞–Ω—Å", "üìú –ò—Å—Ç–æ—Ä–∏—è", "üîÑ –¢–æ—Ä–≥–æ–≤–ª—è", "üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üë§ –ê–∫–∫–∞—É–Ω—Ç", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"])
    def handle_messages(message):
        user_id = message.chat.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.text} –¥–ª—è user_id: {user_id}")
        if message.text == "üìä –°—Ç–∞—Ç–∞":
            send_stat(message)
        elif message.text == "üí∏ –ë–∞–±–∏—Ç":
            babit_menu(message)
        elif message.text == "üí∞ –ë–∞–ª–∞–Ω—Å":
            get_balance(message)
        elif message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è":
            send_history(message)
        elif message.text == "üîÑ –¢–æ—Ä–≥–æ–≤–ª—è":
            trade_btc(message)
        elif message.text == "üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC":
            send_current_price(message)
        elif message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            notifications_menu(message)
        elif message.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç":
            account_info(message)
        elif message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
            send_news(message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def send_stat(message):
        user_id = message.chat.id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id: {user_id}")
        try:
            rsi = calculate_rsi(timeframe)
            screenshot = None  # –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–æ–º
            screenshot, lowprice14d = get_last_5_weeks_and_low_price()
            current_price = get_price_or_change('price')
            if lowprice14d is None or current_price is None:
                raise ValueError("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            change_percent = round((float(current_price) - lowprice14d) / lowprice14d * 100, 2)
            buy_sell_ratio = get_buy_sell_ratio(timeframe)
            caption = (
                f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π: {change_percent}%\n"
                f"üìä RSI: {rsi}\n"
                f"üìà {buy_sell_ratio}\n"
                f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {current_price} USDT"
            )
            logging.info(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {screenshot.getbuffer().nbytes} –±–∞–π—Ç")
            bot.send_photo(chat_id=user_id, photo=screenshot, caption=caption, reply_markup=create_back_button("menu"))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id {user_id}: {e}")
            send_message_with_logging(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", create_back_button("menu"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ë–∞–±–∏—Ç
    def babit_menu(message):
        user_id = message.chat.id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ë–∞–±–∏—Ç –¥–ª—è user_id: {user_id}")
        send_message_with_logging(user_id, "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", create_babit_menu())

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    def get_balance(message):
        user_id = message.chat.id
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id: {user_id}")
        try:
            btc_balance, usdt_balance = fetch_balance()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_balance –∏–∑ features.trade
            balance_message = (
                f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n"
                f"‚Ä¢ BTC: *{btc_balance}*\n"
                f"‚Ä¢ USDT: *{usdt_balance}*"
            )
            send_message_with_logging(user_id, balance_message, create_back_button("babit"))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id {user_id}: {e}")
            send_message_with_logging(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}", create_back_button("babit"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    def send_history(message):
        user_id = message.chat.id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è user_id: {user_id}")
        try:
            history = get_trade_history()
            send_message_with_logging(user_id, f"üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n{history}", create_back_button("babit"))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è user_id {user_id}: {e}")
            send_message_with_logging(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}", create_back_button("babit"))

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC
    def trade_btc(message):
        user_id = message.chat.id
        logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ USDT –¥–ª—è user_id: {user_id}")
        markup = create_back_button("babit")
        bot.send_message(user_id, "üíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: process_trade(msg, bot))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC
    def send_current_price(message):
        user_id = message.chat.id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC –¥–ª—è user_id: {user_id}")
        try:
            current_price = get_price_or_change('price')
            send_message_with_logging(user_id, f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {current_price} USDT", create_back_button("babit"))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è user_id {user_id}: {e}")
            send_message_with_logging(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}", create_back_button("babit"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    def notifications_menu(message):
        user_id = message.chat.id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è user_id: {user_id}")
        markup = create_notifications_menu()
        send_message_with_logging(user_id, "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", markup)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    def account_info(message):
        user_id = message.chat.id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è user_id: {user_id}")
        user_data = load_user_data(user_id)
        user_name = user_data.get("name", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        try:
            response = session.get_wallet_balance(accountType="UNIFIED", coin="BTC,USDT")
            btc_balance = response['result']['list'][0]['coin'][0]['walletBalance']
            usdt_balance = response['result']['list'][0]['coin'][1]['walletBalance']
            balance_message = (
                f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n"
                f"‚Ä¢ BTC: *{btc_balance}*\n"
                f"‚Ä¢ USDT: *{usdt_balance}*"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id {user_id}: {e}")
            balance_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}"
        account_message = (
            f"üë§ *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:*\n"
            f"‚Ä¢ ID: *{user_id}*\n"
            f"‚Ä¢ –ò–º—è: *{user_name}*\n\n"
            f"{balance_message}"
        )
        send_message_with_logging(user_id, account_message, create_account_menu())

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    def send_news(message):
        user_id = message.chat.id
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è user_id: {user_id}")
        news = get_latest_crypto_news()
        send_message_with_logging(user_id, news, create_back_button("menu"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è RSI
    def send_rsi_notification(message):
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è RSI –¥–ª—è user_id: {message.chat.id}")
        send_stat(message)