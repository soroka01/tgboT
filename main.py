import os
import time
import pytz
import json
import telebot
import schedule
from telebot import types
from threading import Thread
from pybit.unified_trading import HTTP
from cfg import symb, timeframe, tgtoken, tgID, bykey, bysecret
from functions import get_price_data, get_price_or_change, calculate_rsi, get_buy_sell_ratio, get_last_5_weeks_and_low_price, get_moscow_time, daily_update, monitor_rsi, process_trade, send_report, get_rsi_and_send_message, save_user_data, load_user_data, save_user_alerts, load_user_alerts, get_latest_crypto_news, get_converted_amount

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(tgtoken)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_MESSAGE = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–æ–º–æ—â—å —Ç—É—Ç: /help\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
HELP_MESSAGE = (
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
    "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
    "üìä –°—Ç–∞—Ç–∞ - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    "üí∏ –ë–∞–±–∏—Ç - –ú–µ–Ω—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏\n"
    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n"
    "üë§ –ê–∫–∫–∞—É–Ω—Ç - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\n"
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

def delete_all_price_alerts(message):
    user_id = message.chat.id
    save_user_alerts(user_id, [])
    bot.send_message(user_id, "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–∏ —É–¥–∞–ª–µ–Ω—ã.")

def delete_price_alert(message):
    user_id = message.chat.id
    alerts = load_user_alerts(user_id)
    if alerts:
        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        alerts_text = "\n".join([f"{i+1}. {level['price']} USDT - {'–ù–∞–≤—Å–µ–≥–¥–∞' if level['permanent'] else '–ï–¥–∏–Ω–∏—á–Ω–æ'}" for i, level in enumerate(alerts)])
        bot.send_message(user_id, f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–∏:\n{alerts_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        bot.register_next_step_handler(message, remove_price_alert)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–∏.")

def remove_price_alert(message):
    user_id = message.chat.id
    try:
        alert_index = int(message.text.strip()) - 1
        alerts = load_user_alerts(user_id)
        if 0 <= alert_index < len(alerts):
            removed_alert = alerts.pop(alert_index)
            save_user_alerts(user_id, alerts)
            bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {removed_alert['price']} USDT —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏.")
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def list_price_alerts(message):
    user_id = message.chat.id
    alerts = load_user_alerts(user_id)
    if alerts:
        alerts_text = "\n".join([f"{i+1}. {level['price']} USDT - {'–ù–∞–≤—Å–µ–≥–¥–∞' if level['permanent'] else '–ï–¥–∏–Ω–∏—á–Ω–æ'}" for i, level in enumerate(alerts)])
        bot.send_message(user_id, f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–∏:\n{alerts_text}")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–∏.")

def save_price_alert(message):
    user_id = message.chat.id
    try:
        price_level = float(message.text.strip())
        alerts = load_user_alerts(user_id)
        if len(alerts) >= 15:
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ 15 –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–∏.")
            return
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ï–¥–∏–Ω–∏—á–Ω–æ", callback_data=f"alert_once_{price_level}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"alert_permanent_{price_level}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="alert_back"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("alert_"))
def handle_alert_callback(call):
    user_id = call.message.chat.id
    data = call.data.split("_")
    action = data[1]
    price_level = float(data[2])
    alerts = load_user_alerts(user_id)
    if action == "once":
        alerts.append({'price': price_level, 'permanent': False})
        bot.send_message(user_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ {price_level} USDT (–µ–¥–∏–Ω–∏—á–Ω–æ).")
    elif action == "permanent":
        alerts.append({'price': price_level, 'permanent': True})
        bot.send_message(user_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ {price_level} USDT (–Ω–∞–≤—Å–µ–≥–¥–∞).")
    elif action == "back":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(call.message, save_price_alert)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    save_user_alerts(user_id, alerts)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

def check_price_alerts():
    current_price = get_price_or_change('price')
    for user_id in tgID:
        alerts = load_user_alerts(user_id)
        for level in alerts[:]:
            if current_price >= level['price']:
                bot.send_message(user_id, f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {level['price']} USDT. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USDT.")
                if not level['permanent']:
                    alerts.remove(level)
        save_user_alerts(user_id, alerts)

def change_user_name(message):
    user_id = message.chat.id
    new_name = message.text.strip()
    user_data = load_user_data(user_id)
    user_data["name"] = new_name
    save_user_data(user_id, user_data)
    bot.send_message(user_id, f"–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.text == "/start":
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        stat_button = types.KeyboardButton("üìä –°—Ç–∞—Ç–∞")
        babit_button = types.KeyboardButton("üí∏ –ë–∞–±–∏—Ç")
        alert_button = types.KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        account_button = types.KeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç")
        markup.add(stat_button, babit_button, alert_button, account_button)
        bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=markup)
    elif message.text == "/help":
        bot.send_message(message.chat.id, HELP_MESSAGE)

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∞")
def send_stat(message):
    user_id = message.chat.id
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        rsi = calculate_rsi(timeframe)
        screenshot, lowprice14d = get_last_5_weeks_and_low_price()
        current_price = get_price_or_change('price')
        
        if lowprice14d is None or current_price is None:
            raise ValueError("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        
        change_percent = round((float(current_price) - lowprice14d) / lowprice14d * 100, 2)
        buy_sell_ratio = get_buy_sell_ratio(timeframe)
        
        caption = (
            f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π: {change_percent}%\n"
            f"üìä RSI: {rsi}\n"
            f"üìà {buy_sell_ratio}\n"
            f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {current_price} USDT"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏
        bot.send_photo(chat_id=user_id, photo=screenshot, caption=caption)
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(func=lambda message: message.text == "üí∏ –ë–∞–±–∏—Ç")
def babit_menu(message):
    user_id = message.chat.id
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é "–ë–∞–±–∏—Ç"
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    balance_button = types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")
    history_button = types.KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")
    trade_button = types.KeyboardButton("üîÑ –¢–æ—Ä–≥–æ–≤–ª—è")
    price_button = types.KeyboardButton("üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC")
    back_button = types.KeyboardButton("üîô")
    markup.add(balance_button, history_button, trade_button, price_button, back_button)
    bot.send_message(user_id, "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîô")
def cancel_trade(message):
    user_id = message.chat.id
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    stat_button = types.KeyboardButton("üìä –°—Ç–∞—Ç–∞")
    babit_button = types.KeyboardButton("üí∏ –ë–∞–±–∏—Ç")
    alert_button = types.KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    account_button = types.KeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç")
    markup.add(stat_button, babit_button, alert_button, account_button)
    bot.send_message(user_id, "üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def get_balance(message):
    user_id = message.chat.id
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = HTTP(testnet=True, api_key=bykey, api_secret=bysecret)
        btc_balance = session.get_wallet_balance(accountType="UNIFIED", coin="BTC")
        usdt_balance = session.get_wallet_balance(accountType="UNIFIED", coin="USDT")
        
        balance_message = (
            f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n"
            f"‚Ä¢ BTC: *{btc_balance}*\n"
            f"‚Ä¢ USDT: *{usdt_balance}*"
        )
        
        bot.send_message(user_id, balance_message, parse_mode='Markdown')
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
def send_history(message):
    user_id = message.chat.id
    bot.send_message(user_id, "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

@bot.message_handler(func=lambda message: message.text == "üîÑ –¢–æ—Ä–≥–æ–≤–ª—è")
def trade_btc(message):
    user_id = message.chat.id
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton("üîô")
    markup.add(back_button)
    bot.send_message(user_id, "üíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC:", reply_markup=markup)
    bot.register_next_step_handler(message, process_trade)

@bot.message_handler(func=lambda message: message.text == "üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC")
def send_current_price(message):
    user_id = message.chat.id
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC
        current_price = get_price_or_change('price')
        bot.send_message(user_id, f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {current_price} USDT", parse_mode='Markdown')
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")

@bot.message_handler(func=lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def notifications_menu(message):
    user_id = message.chat.id
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    set_alert_button = types.KeyboardButton("üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    list_alerts_button = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    delete_alert_button = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    delete_all_alerts_button = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    back_button = types.KeyboardButton("üîô")
    markup.add(set_alert_button, list_alerts_button, delete_alert_button, delete_all_alerts_button, back_button)
    bot.send_message(user_id, "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def set_alert(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, save_price_alert)

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
def list_alerts(message):
    list_price_alerts(message)

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def delete_alert(message):
    delete_price_alert(message)

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def delete_all_alerts(message):
    delete_all_price_alerts(message)

@bot.message_handler(func=lambda message: message.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç")
def account_info(message):
    user_id = message.chat.id
    user_data = load_user_data(user_id)
    user_name = user_data.get("name", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = HTTP(testnet=True, api_key=bykey, api_secret=bysecret)
        btc_balance = session.get_wallet_balance(accountType="UNIFIED", coin="BTC")
        usdt_balance = session.get_wallet_balance(accountType="UNIFIED", coin="USDT")
        
        balance_message = (
            f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n"
            f"‚Ä¢ BTC: *{btc_balance}*\n"
            f"‚Ä¢ USDT: *{usdt_balance}*"
        )
    except Exception as e:
        balance_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}"
    
    account_message = (
        f"üë§ *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:*\n"
        f"‚Ä¢ ID: *{user_id}*\n"
        f"‚Ä¢ –ò–º—è: *{user_name}*\n\n"
        f"{balance_message}"
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è" –∏ "–ù–∞–∑–∞–¥"
    markup = types.InlineKeyboardMarkup()
    change_name_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
    markup.add(change_name_button, back_button)
    
    bot.send_message(user_id, account_message, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_name")
def change_name_callback(call):
    user_id = call.message.chat.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    bot.register_next_step_handler(call.message, change_user_name)
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu_callback(call):
    user_id = call.message.chat.id
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    stat_button = types.KeyboardButton("üìä –°—Ç–∞—Ç–∞")
    babit_button = types.KeyboardButton("üí∏ –ë–∞–±–∏—Ç")
    alert_button = types.KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    account_button = types.KeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç")
    markup.add(stat_button, babit_button, alert_button, account_button)
    bot.send_message(user_id, "üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
schedule.every().minute.do(daily_update)
schedule.every().minute.do(check_price_alerts)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

schedule_thread = Thread(target=run_schedule)
schedule_thread.start()

if __name__ == '__main__':
    bot.polling(none_stop=True)
